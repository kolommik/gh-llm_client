import os
import datetime
import json
from dotenv import load_dotenv, find_dotenv
import streamlit as st
from openai import OpenAI
from app.utils import load_settings, save_settings

# ===========================================================
# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π
a = load_dotenv(find_dotenv())  # read local .env file
openai_api_key = os.environ['OPENAI_API_KEY']

# ===========================================================
# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
settings = load_settings()
folder_path = settings.get("folder_path", "")
target_extensions = settings.get("target_extensions", "")
always_include = settings.get("always_include", "")
excluded_dirs = settings.get("excluded_dirs", "")
system_prompt = settings.get("system_prompt", "")

# ===========================================================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
st.sidebar.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

# –ü–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
folder_path = st.sidebar.text_input(
    "Folder path", folder_path, help="–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
)
target_extensions = st.sidebar.text_input(
    "Target extensions",
    target_extensions,
    help="–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: .py,.txt,.md",
)
always_include = st.sidebar.text_input(
    "Always include files", always_include, help="–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
)
excluded_dirs = st.sidebar.text_input(
    "Excluded directories", excluded_dirs, help="–í–≤–µ–¥–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
)
system_prompt = st.sidebar.text_area("System prompt", system_prompt)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞
load_button = st.sidebar.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
if load_button:
    settings = load_settings()
    folder_path = settings.get("folder_path", "")
    target_extensions = settings.get("target_extensions", "")
    always_include = settings.get("always_include", "")
    excluded_dirs = settings.get("excluded_dirs", "")
    system_prompt = settings.get("system_prompt", "")

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª
save_button = st.sidebar.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
if save_button:
    save_settings(
        folder_path, target_extensions, always_include, excluded_dirs, system_prompt
    )
    st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª settings.json")


# st.write(f"–ó–Ω–∞—á–µ–Ω–∏–µ x: {x}")

# ===========================================================
# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ session_state —Ñ–ª–∞–≥ –¥–ª—è expander
if 'show_logs' not in st.session_state:
    st.session_state['show_logs'] = False  # –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ

# –ö–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
if st.button('–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ª–æ–≥–∏'):
    st.session_state['show_logs'] = not st.session_state['show_logs']

if st.session_state['show_logs']:
    with st.expander("–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã", expanded=True):
        st.text("\n".join(st.session_state.get("log", [])))

# # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
# if st.button('–û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –ª–æ–≥–æ–≤'):
#     with st.expander("–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã"):
#         # if not(st.session_state["log"]):
#         st.text("\n".join(st.session_state["log"]))

#     with st.expander("—á—Ç–æ-—Ç–æ –µ—â–µ"):
#         st.text("\n".join(st.session_state["log"]))
# KeyError: 'st.session_state has no key "log". Did you forget to initialize it?
# More info: https://docs.streamlit.io/library/advanced-features/session-state#initialization'

st.title("üí¨ –í–æ–ø—Ä–æ—Å")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞
def add_log(message):
    if "log" not in st.session_state:
        st.session_state["log"] = []
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    st.session_state["log"].append(f"{timestamp} - {message}")


# tabs = st.tabs(["üí¨ –ß–∞—Ç", "–õ–æ–≥"])


if "messages" not in st.session_state:
    st.session_state["messages"] = [{"role": "assistant", "content": "How can I help you?"}]

for msg in st.session_state.messages:
    st.chat_message(msg["role"]).write(msg["content"])

if prompt := st.chat_input():
    if not openai_api_key:
        st.info("Please add your OpenAI API key to continue.")
        st.stop()

    client = OpenAI(api_key=openai_api_key)
    st.session_state.messages.append({"role": "user", "content": prompt})
    st.chat_message("user").write(prompt)
    response = client.chat.completions.create(model="gpt-3.5-turbo", messages=st.session_state.messages)
    msg = response.choices[0].message.content


    st.session_state.messages.append({"role": "assistant", "content": msg})
    st.chat_message("assistant").write(msg)
    

    add_log("="*40)
    add_log("="*40)
    add_log(json.dumps(st.session_state.messages, indent=4))
    add_log("="*40)
    add_log("–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    add_log(msg)


# # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤
# if st.button('–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏'):
#     st.text_area("–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã:", value="\n".join(st.session_state["log"]), height=300)

# # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
# if st.button('–û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –ª–æ–≥–æ–≤'):
#     with st.expander("–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã"):
#         st.text("\n".join(st.session_state["log"]))
